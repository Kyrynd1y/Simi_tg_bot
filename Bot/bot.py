import random
import sqlite3
import time

import openai
import requests
import telegram

import dotenv
import os
import replicate

from telegram import ReplyKeyboardMarkup, Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, MessageHandler, filters, CommandHandler, ConversationHandler, CallbackQueryHandler
import data
from db_session import *

openai.api_key = "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"

dotenv.load_dotenv()
BOT_TOKEN = os.getenv('REPLICATE_API_TOKEN')

cities_lst = []
used_cities_list = []
part_of_game_markup = ['/stop_play']
exit = ['/exit']
games_markup = ReplyKeyboardMarkup([['—Å—ã–≥—Ä–∞–µ–º –≤ –≥–æ—Ä–æ–¥–∞', '—Ü—É-–µ-—Ñ–∞', '–∑–∞–≥–∞–¥–∞–π –∑–∞–≥–∞–¥–∫—É'] + part_of_game_markup])
tsuefa_markup = ReplyKeyboardMarkup([data.tsuefa + part_of_game_markup])
quit_markup = ReplyKeyboardMarkup([['/talk', '/play', '/images', '/stop']])
talk_markup = ReplyKeyboardMarkup([['/stop_talk']])
riddles_markup = ReplyKeyboardMarkup([['—É–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç'] + part_of_game_markup])
images_purgat_markup = ReplyKeyboardMarkup([['—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å', '—Ç–æ–ø –∫–∞—Ä—Ç–∏–Ω–æ–∫'] + exit])
scrolling_images_markup = InlineKeyboardMarkup([[InlineKeyboardButton('üëç', callback_data='like'),
                                                 InlineKeyboardButton('download', callback_data='download'),
                                                 InlineKeyboardButton('üëé', callback_data='dislike')], [
                                                    InlineKeyboardButton('‚óÄ', callback_data='back'),
                                                    InlineKeyboardButton('...', callback_data='...'),
                                                    InlineKeyboardButton('‚ñ∂', callback_data='forward')]])
top_images_markup = ReplyKeyboardMarkup([["—Ç–æ–ø 2", "—Ç–æ–ø 3", "—Ä–∞–Ω–¥–æ–º–Ω–æ"] + exit])

LAST_LETTER = 'last_letter'
ANSWER = 'answer'
COUNT_ANSWERS = 'COUNT_ANSWERS'
NUMBER_LINK = 'NUMBER_LINK'
MAX_COUNT_LINK = 'MAX_COUNT_LINK'
USER_ID = 'USER_ID'
MESSAGE_ID = 'MESSAGE_ID'
LINKS = 'LINKS'
riddles_level = 1
count_correct_answer = 0

global_init("../data/riddles.db")
db_sess = create_session()

bot = telegram.Bot(BOT_TOKEN)


async def send(update, context):
    command = update.message.text
    response = openai.Completion.create(
        model="text-davinci-003",
        prompt=command,
        temperature=0.9,
        max_tokens=3000,
        top_p=0.7,
        frequency_penalty=0.0
    )
    await update.message.reply_text(response['choices'][0]['text'])
    return 'continue'


async def game_cities(update, context):
    message = update.message.text.lower().strip()
    print('game_cities')

    if message[0] != context.user_data[LAST_LETTER]:
        await update.message.reply_text('–ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –±—É–∫–≤–æ–π –º–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞!')
        return 'cities'
    elif message in used_cities_list:
        await update.message.reply_text('–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ —É–∂–µ –±—ã–ª –Ω–∞–∑–≤–∞–Ω!')
        return 'cities'
    elif message not in cities_lst:
        await update.message.reply_text('–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞!')
        return 'cities'
    context.user_data[LAST_LETTER] = message[-1]
    cities_lst.remove(message)
    used_cities_list.append(message)
    chosen_city = random.choice(cities_lst)
    while chosen_city[0] != context.user_data[LAST_LETTER]:
        chosen_city = random.choice(cities_lst)
    used_cities_list.append(chosen_city)
    cities_lst.remove(chosen_city)
    context.user_data[LAST_LETTER] = chosen_city[-1]
    chosen_city[0].upper()
    await update.message.reply_text(chosen_city.capitalize())
    return 'cities'


async def tsuefa(update, context):
    # —Å–¥–µ–ª–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–∞
    message = update.message.text
    bot_tsuefa = context.user_data['tsuefa']
    if bot_tsuefa == message:
        await update.message.reply_text('–Ω–∏—á—å—è', reply_markup=ReplyKeyboardMarkup([data.tsuefa + ['/talk']]))
    elif (bot_tsuefa == '–∫–∞–º–µ–Ω—å' and message == '–Ω–æ–∂–Ω–∏—Ü—ã') or (bot_tsuefa == '–Ω–æ–∂–Ω–∏—Ü—ã' and message == '–±—É–º–∞–≥–∞') or (
            bot_tsuefa == '–±—É–º–∞–≥–∞' and message == '–∫–∞–º–µ–Ω—å'):
        await update.message.reply_text('—è –≤—ã–∏–≥—Ä–∞–ª!)', reply_markup=tsuefa_markup)
    else:
        await update.message.reply_text('–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏!',
                                        reply_markup=tsuefa_markup)
    time.sleep(2)
    await update.message.reply_text('—Ü—É')
    time.sleep(1)
    await update.message.reply_text('–µ')
    time.sleep(1)
    await update.message.reply_text('—Ñ–∞')
    bot_tsuefa = random.choice(data.tsuefa)
    context.user_data['tsuefa'] = bot_tsuefa
    await update.message.reply_text(bot_tsuefa)
    return 'tsuefa'


async def images(update, context):
    await update.message.reply_text('–æ—Ç–∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?', reply_markup=images_purgat_markup)
    return 'purgat'


async def return_images(update, context):
    command = update.message.text
    if command == '—Ç–æ–ø –∫–∞—Ä—Ç–∏–Ω–æ–∫':
        await purgatory_images(update, context)
        return 'sorting'
    await update.message.reply_text('–†–∏—Å—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É! –≠—Ç–æ –Ω–µ –∑–∞–π–º–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏')
    print(command)
    output = replicate.run(
        "ai-forever/kandinsky-2:r8_1OWomDah0wmzZ1L2stFh6UZhuS4uYhP2i4ZZ5",
        input={"prompt": f"{command}, 4k photo"}
    )
    img_data = requests.get(*output).content
    link = f'../data/images/{"_".join(command.split())}.jpg'
    image = Image(key_word=f'{command.split()[0]}', link=link, rating=0)
    db_sess.add(image)
    db_sess.commit()
    with open(link, 'wb') as handler:
        handler.write(img_data)
    await bot.send_photo(update.message.chat.id, photo=img_data)
    await update.message.reply_text('–ì–æ—Ç–æ–≤–æ! –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –µ—â–µ —á—Ç–æ-–Ω–∏–±—É–¥—å?')
    return 'generate'


async def purgatory_images(update, context):
    if update.message.text == '—Ç–æ–ø –∫–∞—Ä—Ç–∏–Ω–æ–∫':
        await update.message.reply_text('–ø–æ –∫–∞–∫–æ–º—É –ø—Ä–∏–Ω—Ü–∏–ø—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è?', reply_markup=top_images_markup)
        context.user_data[NUMBER_LINK] = 0
        return 'sorting'
    elif update.message.text == '—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å':
        await update.message.reply_text('–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ? –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ')
        return 'generate'
    else:
        await update.message.reply_text('–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É')
        return 'purgat'


async def images_sort_message(update: Update, context):
    command = update.message.text
    print(command, '—Ç–æ–ø' in command)
    if command == '—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å':
        await purgatory_images(update, context)
        return 'generate'
        # —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    if '—Ç–æ–ø' in command:
        count_top = int(command[command.find('—Ç–æ–ø') + 3:].strip())
        context.user_data[MAX_COUNT_LINK] = count_top - 1
        links = get_links(count_top)
        context.user_data[LINKS] = links
    elif command == '—Ä–∞–Ω–¥–æ–º–Ω–æ':
        context.user_data[MAX_COUNT_LINK] = 0
        links = get_links(command)
        print('links', links)
        context.user_data[LINKS] = links
    else:
        await update.message.reply_text('–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É')
        return 'sorting'
    await bot.send_photo(update.message.chat.id, photo=open(links[context.user_data[NUMBER_LINK]], 'rb'),
                         reply_markup=scrolling_images_markup)
    context.user_data[MESSAGE_ID] = update.inline_query
    return 'scrolling'


async def scrolling_images(update: Update, context):
    query = update.callback_query
    print('query', query)
    if update.message.text == '—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å':
        await purgatory_images(update, context)
        return 'generate'
    if query.data == 'like':
        db_sess.query(Image).filter(Image.id == str(context.user_data[NUMBER_LINK] + 1)).first().rating += 1
        db_sess.commit()
    elif query.data == 'dislike':
        db_sess.query(Image).filter(Image.id == str(context.user_data[NUMBER_LINK] + 1)).first().rating -= 1
        db_sess.commit()
    elif query.data == 'back' and context.user_data[NUMBER_LINK] != 0:
        context.user_data[NUMBER_LINK] -= 1
    elif query.data == 'forward' and context.user_data[NUMBER_LINK] != context.user_data[MAX_COUNT_LINK]:
        context.user_data[NUMBER_LINK] += 1
    link = context.user_data[LINKS][context.user_data[NUMBER_LINK]]
    media = telegram.InputMediaPhoto(media=open(link, 'rb'))
    await query.message.edit_media(media=media, reply_markup=scrolling_images_markup)


def get_links(command):
    links = []
    db_sess.query(Image).order_by(Image.rating)
    if type(command) == int:
        for i in range(command):
            links.append(db_sess.query(Image.link)[i][0])
        db_sess.flush()
        db_sess.commit()
    if command == '—Ä–∞–Ω–¥–æ–º–Ω–æ':
        max_images = max(db_sess.query(Image.id))[0]
        print(max_images)
        id_image = random.randint(0, int(max_images))
        links.append(db_sess.query(Image.link)[id_image][0])
    return links


async def next_image(update, context):
    await update.message


def make_a_riddles():
    return random.choice(data.riddles[riddles_level - 1])


async def riddles_func(update, context):
    global riddles_level
    command = update.message.text.lower()
    if command == "—É–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç":
        context.user_data[COUNT_ANSWERS] += 1
        await update.message.reply_text(context.user_data[ANSWER])
    elif command == context.user_data[ANSWER]:
        context.user_data[COUNT_ANSWERS] += 1
        await update.message.reply_text('–í–µ—Ä–Ω–æ!')
    else:
        await update.message.reply_text('–ù–µ–≤–µ—Ä–Ω–æ(')
        return 'riddles'
    if context.user_data[COUNT_ANSWERS] == 3 and riddles_level != 2:
        riddles_level += 1
    riddle = make_a_riddles()
    await update.message.reply_text(riddle['riddle'])
    context.user_data[ANSWER] = riddle[ANSWER]
    return 'riddles'


async def purgatory(update, context):
    global cities_lst
    command = update.message.text.lower()
    print(command)
    if command == '—Å—ã–≥—Ä–∞–µ–º –≤ –≥–æ—Ä–æ–¥–∞':
        await update.message.reply_text(data.cities_rules,
                                        reply_markup=ReplyKeyboardMarkup([part_of_game_markup]))
        cities_lst = data.cities_lst.copy()
        await update.message.reply_text("—è –Ω–∞—á–Ω—É")
        chosen_city = random.choice(cities_lst)
        used_cities_list.append(chosen_city)
        cities_lst.remove(chosen_city)
        context.user_data[LAST_LETTER] = chosen_city[-1]
        await update.message.reply_text(chosen_city.capitalize())
        return 'cities'
    elif command == '—Ü—É-–µ-—Ñ–∞':
        await update.message.reply_text(data.tsuefa_rules,
                                        reply_markup=tsuefa_markup)
        time.sleep(5)
        await update.message.reply_text('—Ü—É')
        time.sleep(1)
        await update.message.reply_text('–µ')
        time.sleep(1)
        await update.message.reply_text('—Ñ–∞')
        bot_choise = random.choice(data.tsuefa)
        context.user_data['tsuefa'] = bot_choise
        await update.message.reply_text(bot_choise)
        return 'tsuefa'
    elif command == '–∑–∞–≥–∞–¥–∞–π –∑–∞–≥–∞–¥–∫—É':
        await update.message.reply_text(data.qst_rules,
                                        reply_markup=riddles_markup)
        riddle = make_a_riddles()
        await update.message.reply_text(riddle['riddle'])
        context.user_data[ANSWER] = riddle['answer']
        context.user_data[COUNT_ANSWERS] = 0
        return 'riddles'


async def stop(update, context):
    print('stop')
    await update.message.reply_text("–î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ —á–∞—Ç–µ!", reply_markup=ReplyKeyboardMarkup([['/start']]))


async def start_games(update, context):
    await update.message.reply_text('–≤ –∫–∞–∫—É—é –∏–≥—Ä—É —Å—ã–≥—Ä–∞–µ–º?', reply_markup=games_markup)
    return 'purgatory'


async def talking(update, context):
    await update.message.reply_text('–¥–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º)', reply_markup=talk_markup)
    return 'continue'


async def start(update, context):
    await update.message.reply_text('—á–µ–º –∑–∞–π–º–µ–º—Å—è?', reply_markup=quit_markup)
    context.user_data[USER_ID] = update.message.chat_id
    return ConversationHandler.END


def main():
    application = Application.builder().token(BOT_TOKEN).build()
    conv_handler_player = ConversationHandler(

        entry_points=[CommandHandler('play', start_games)],

        states={
            'cities': [MessageHandler(filters.TEXT & ~filters.COMMAND, game_cities)],
            'tsuefa': [MessageHandler(filters.TEXT & ~filters.COMMAND, tsuefa)],
            'purgatory': [MessageHandler(filters.TEXT & ~filters.COMMAND, purgatory)],
            'riddles': [MessageHandler(filters.TEXT & ~filters.COMMAND, riddles_func)]

        },

        fallbacks=[CommandHandler('stop_play', start)]
    )

    conv_handler_talker = ConversationHandler(

        entry_points=[CommandHandler('talk', talking)],

        states={
            'continue': [MessageHandler(filters.TEXT & ~filters.COMMAND, send)],
        },

        fallbacks=[CommandHandler('stop_talk', start)]
    )
    # conv_handler = ConversationHandler(
    #     entry_points=[CommandHandler('start', start)],
    #     states={
    #         'FIRST': [CallbackQueryHandler(scrolling_images)]
    #     },
    #     fallbacks=[CommandHandler('start', start)]
    # )
    conv_handler_images = ConversationHandler(
        entry_points=[CommandHandler('images', images)],

        states={
            'purgat': [MessageHandler(filters.TEXT & ~filters.COMMAND, purgatory_images)],
            'generate': [MessageHandler(filters.TEXT & ~filters.COMMAND, return_images)],
            'sorting': [MessageHandler(filters.TEXT & ~filters.COMMAND, images_sort_message)],
            'scrolling': [CallbackQueryHandler(scrolling_images)]
        },
        fallbacks=[CommandHandler('exit', start)]
    )
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('stop', stop))
    application.add_handler(conv_handler_player)
    application.add_handler(conv_handler_talker)
    application.add_handler(conv_handler_images)
    application.run_polling()


if __name__ == '__main__':
    main()
